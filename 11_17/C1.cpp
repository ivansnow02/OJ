/**
 * 题目描述
  集合是由一个或多个确定的元素所构成的整体。集合的运算有并、交、相对补等。

  集合A和集合B的交集：由属于A且属于B的相同元素组成的集合。

  集合A和集合B的并集：由所有属于集合A或属于集合B的元素所组成的集合。

  集合B关于集合A的相对补集，记做A-B：由属于A而不属于B的元素组成的集合。

  假设集合A={10,20,30}，集合B={1,10,50,8}。则A与B的并是{10,20,30,1,50,8}，A与B的交是{10}，B关于A的相对补集是{20,30}。

  定义整数集合类CSet，属性包括：集合中的元素个数n，整型指针data存储集合中的元素。
  主函数输入集合A、B的数据，计算集合的并、交、相对补。
  可根据题目，为CSet类添加需要的成员函数。


  方法有：重载输出，按样例格式输出集合中的元素。
  重载+运算符，求集合A和集合B的并集，并返回结果集合。
  重载-运算符，求集合B关于集合A的相对补集，并返回结果集合。
  重载*运算符，求集合A和集合B的交集，并返回结果集合。
  输入
  测试次数
  每组测试数据两行，格式如下：
  第一行：集合A的元素个数和元素
  第二行：集合B的元素个数和元素
  输出
  每组测试数据输出如下：
  第一行：集合A
  第二行：集合B
  第三行：A和B的并
  第四行：A和B的交
  第五行：B关于A的相对补集 与 A关于B的相对补集的并，即(A-B)+(B-A)
  每组测试数据间以空行分隔。
 */

#include <bits/stdc++.h>
using namespace std;
class Cset {
	private:
		int n;
		int* data;
	public:
		Cset(int n1, int* d1) {
			n = n1;
			for (int i = 0; i < n; i++) {
				*(data + i) = *(d1 + i);
			}
		}
		Cset &operator+(Cset &c1) {
			int i = 0, j = 0;
			for (j = 0; j < c1.n; j++) {
				int flag = 0;
				for (i = 0; i < n; i++) {
					if (*(data + i) == *(c1.data)) {
						flag = 1;
						break;
					}
				}
				if (!flag) {
					*(data + n + 1) = *c1.data;
					n++;
				}
			}
			return *this;
		}
};
int main() {
	
	int n1,d1[10000],n2,d2[10000];
	for(int i=0;i<n1;i++){
		cin>>d1[i];
	}
	for(int i=0;i<n2;i++){
		cin>>d2[i];
	}
	Cset c1(n1,d1),c2(n2,d2);
	Cset c3 = c1+c2;
}
